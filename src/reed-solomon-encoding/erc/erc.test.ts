import { describe, test, expect } from 'vitest';
import { ReedSolomon } from './erc.mts';
import { ReedSolomon as ReedSolomonWorking } from './erc-working.mjs';
import { repeat, streamToString, stringToStream } from './test-helpers';



describe('RSCodec', function () {
  
  test('should encode/decode properly', function () {
    
    const input = stringToStream('hello world')
    const rs = new ReedSolomon(10);
    const enc = rs.encode(input);
    
    expect(Array.from(enc)).toEqual([
      104, 101, 108, 108, 111, 32, 119,
      111, 114, 108, 100, 237, 37, 84,
      196, 253, 253, 137, 243, 168, 170
    ]);
    
    expect(streamToString(rs.decode(enc))).toEqual('hello world');
    
  });
  
  test('should correct errors properly', function () {
    
    const input = stringToStream(repeat(10, 'hello world '));
    const rs = new ReedSolomon(10);
    const enc = rs.encode(input);
    
    expect(Array.from(enc)).toEqual([
      // 10 × "hello world " (120 bytes)
      104, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100, 32,
      104, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100, 32,
      104, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100, 32,
      104, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100, 32,
      104, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100, 32,
      104, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100, 32,
      104, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100, 32,
      104, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100, 32,
      104, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100, 32,
      104, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100, 32,
      // 10 parity bytes (generated by the codec)
      40, 171, 40, 207, 45, 222, 68, 85, 45, 171
    ]);
    
    expect(streamToString(rs.decode(enc))).toEqual(repeat(10, 'hello world '));
    // expect(rs.decode(enc)).toEqual(repeat(10, 'hello world '));

    enc[27] = 99;
    expect(streamToString(rs.decode(enc))).toEqual(repeat(10, 'hello world '));
    
    // enc[82] = 99; enc[83] = 99; enc[84] = 99;
  
    // expect(function () { rs.decode(enc) }).toThrow();
    
  });
  
  test('should work with long input', function () {
    
    const input = stringToStream(repeat(10000, 'a'))
    const rs = new ReedSolomon(10);
    const rsw = new ReedSolomonWorking(10);
    const enc = rs.encode(input);
    const encw = rsw.encode(repeat(10000, 'a'));
    
    expect(streamToString(rs.decode(enc))).toEqual(repeat(10000, 'a'));
    expect(rsw.decode(encw)).toEqual(repeat(10000, 'a'))

    enc[177] = 99;
    enc[2212] = 88;
    // encw[177] = 99;
    // encw[2212] = 88;
    
    // expect(streamToString(rs.decode(enc))).toEqual(repeat(10000, 'a'));
    expect(rsw.decode(encw)).toEqual(repeat(10000, 'a'))
    
  })

  // TODO generate a list of test values, test them here
  
});